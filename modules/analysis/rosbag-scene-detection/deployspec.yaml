deploy:
  phases:
    install:
      commands:
        - npm install -g aws-cdk@2.82.0
        - apt-get install jq
        - pip install -r requirements.txt
    build:
      commands:
        - aws iam create-service-linked-role --aws-service-name elasticmapreduce.amazonaws.com || true
        - export ECR_REPO_NAME=$(echo $ADDF_PARAMETER_FARGATE | jq -r '."ecr-repository-name"')
        - aws ecr describe-repositories --repository-names ${ECR_REPO_NAME} || aws ecr create-repository --repository-name ${ECR_REPO_NAME}
        - export IMAGE_NAME=$(echo $ADDF_PARAMETER_FARGATE | jq -r '."image-name"')
        - export COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
        - export IMAGE_TAG=${COMMIT_HASH:=latest}
        - export REPOSITORY_URI=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$ECR_REPO_NAME
        - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
        - >
          echo "ADDF_PARAMETER_SHARED_BUCKET_NAME: ${ADDF_PARAMETER_SHARED_BUCKET_NAME}"
        - echo Building the Docker image...
        - cd service/ && docker build -t $REPOSITORY_URI:latest .
        - docker tag $REPOSITORY_URI:latest $REPOSITORY_URI:$IMAGE_TAG
        - docker push $REPOSITORY_URI:latest && docker push $REPOSITORY_URI:$IMAGE_TAG
        - cd .. && cdk deploy --all --require-approval never --progress events --app "python app.py" --outputs-file ./cdk-exports.json
        - export ADDF_MODULE_METADATA=$(python -c "import json; file=open('cdk-exports.json'); print(json.load(file)['addf-${ADDF_DEPLOYMENT_NAME}-${ADDF_MODULE_NAME}']['metadata'])")
    # post_build:
    #   commands:
    #     #- aws s3 cp --recursive s3://aws-autonomous-driving-datasets/test-vehicle-01/072021/small2__2020-11-19-16-21-22_4.bag s3://${ADDF_PARAMETER_SHARED_BUCKET_NAME}/
destroy:
  phases:
    install:
      commands:
        - npm install -g aws-cdk@2.82.0
        - pip install -r requirements.txt
    build:
      commands:
        - cdk destroy --all --force --app "python app.py"
build_type: BUILD_GENERAL1_LARGE